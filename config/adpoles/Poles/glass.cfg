# Configuration file

glass {
    # Defines how fast sliding velocity changes. [range: 0.0 ~ 0.1, default: 0.04]
    S:acceleration=0.04

    # Set to 'false' if you don't need this unit. [default: true]
    B:enabled=true

    # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
    # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
    # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
    # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
    # Use '*' char as meta value to specify all possible values.
    # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
    # Also you may use just ore dictionary name as full id.
    #  [default: glass]
    S:relatedBlockId=glass

    maxVelocity {
        # Defines the maximum climbing speed, up the pole. [range: 0.0 ~ 0.4, default: 0.2]
        S:climbing=0.2

        # Defines the maximum sliding speed, down the pole. [range: 0.0 ~ 0.8, default: 0.4]
        S:sliding=0.4

        # Defines the maximum spinning speed, around the pole. [range: 0.0 ~ 0.2, default: 0.1]
        S:spinning=0.1
    }

    CraftingRecipe {

        main {
            # Amount of output units. [range: 1 ~ 64, default: 8]
            I:amount=8

            # Recipe components list.
            # Components should be represented by its ids.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
            # Also you may use just ore dictionary name as full id.
            #  [default: [glass]]
            S:components <
                glass
             >

            # Output unit id.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
            # Also you may use just ore dictionary name as full id.
            #  [default: adpoles:glass]
            S:output=adpoles:glass

            # Shaped recipe pattern in format <nn nn> or <nnn nnn nnn>.
            # Where 'n' - number of recipe component (from 1 to 9).
            # Zero value (0) is for empty slot.
            # If pattern is empty, then recipe will be treated as shapeless. [default: 010 010 010]
            S:pattern=010 010 010
        }

    }

}


